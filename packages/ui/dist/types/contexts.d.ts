/// <reference types="react" />
import { Plugins, UIOptions } from '@pdfme/common';
export declare const I18nContext: import("react").Context<(key: "type" | "width" | "height" | "rotate" | "opacity" | "cancel" | "field" | "fieldName" | "align" | "edit" | "plsInputName" | "fieldMustUniq" | "notUniq" | "noKeyName" | "fieldsList" | "editField" | "errorOccurred" | "errorBulkUpdateFieldName" | "commitBulkUpdateFieldName" | "bulkUpdateFieldName" | "addPageAfter" | "removePage" | "removePageConfirm" | "hexColorPrompt" | "schemas.color" | "schemas.borderWidth" | "schemas.borderColor" | "schemas.backgroundColor" | "schemas.textColor" | "schemas.bgColor" | "schemas.horizontal" | "schemas.vertical" | "schemas.left" | "schemas.center" | "schemas.right" | "schemas.top" | "schemas.middle" | "schemas.bottom" | "schemas.padding" | "schemas.text.fontName" | "schemas.text.size" | "schemas.text.spacing" | "schemas.text.textAlign" | "schemas.text.verticalAlign" | "schemas.text.lineHeight" | "schemas.text.min" | "schemas.text.max" | "schemas.text.fit" | "schemas.text.dynamicFontSize" | "schemas.barcodes.barColor" | "schemas.barcodes.includetext" | "schemas.table.alternateBackgroundColor" | "schemas.table.tableStyle" | "schemas.table.headStyle" | "schemas.table.bodyStyle" | "schemas.table.columnStyle", dict?: {
    cancel: string;
    field: string;
    fieldName: string;
    align: string;
    width: string;
    opacity: string;
    height: string;
    rotate: string;
    edit: string;
    plsInputName: string;
    fieldMustUniq: string;
    notUniq: string;
    noKeyName: string;
    fieldsList: string;
    editField: string;
    type: string;
    errorOccurred: string;
    errorBulkUpdateFieldName: string;
    commitBulkUpdateFieldName: string;
    bulkUpdateFieldName: string;
    addPageAfter: string;
    removePage: string;
    removePageConfirm: string;
    hexColorPrompt: string;
    'schemas.color': string;
    'schemas.borderWidth': string;
    'schemas.borderColor': string;
    'schemas.backgroundColor': string;
    'schemas.textColor': string;
    'schemas.bgColor': string;
    'schemas.horizontal': string;
    'schemas.vertical': string;
    'schemas.left': string;
    'schemas.center': string;
    'schemas.right': string;
    'schemas.top': string;
    'schemas.middle': string;
    'schemas.bottom': string;
    'schemas.padding': string;
    'schemas.text.fontName': string;
    'schemas.text.size': string;
    'schemas.text.spacing': string;
    'schemas.text.textAlign': string;
    'schemas.text.verticalAlign': string;
    'schemas.text.lineHeight': string;
    'schemas.text.min': string;
    'schemas.text.max': string;
    'schemas.text.fit': string;
    'schemas.text.dynamicFontSize': string;
    'schemas.barcodes.barColor': string;
    'schemas.barcodes.includetext': string;
    'schemas.table.alternateBackgroundColor': string;
    'schemas.table.tableStyle': string;
    'schemas.table.headStyle': string;
    'schemas.table.bodyStyle': string;
    'schemas.table.columnStyle': string;
} | undefined) => string>;
export declare const FontContext: import("react").Context<Record<string, {
    data: (string | ArrayBuffer | Uint8Array) & (string | ArrayBuffer | Uint8Array | undefined);
    fallback?: boolean | undefined;
    subset?: boolean | undefined;
}>>;
export declare const PluginsRegistry: import("react").Context<Plugins>;
export declare const OptionsContext: import("react").Context<UIOptions>;
